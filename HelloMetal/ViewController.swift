//
//  ViewController.swift
//  HelloMetal
//
//  Created by Charles Martin Reed on 10/1/18.
//  Copyright Â© 2018 Charles Martin Reed. All rights reserved.
//

import UIKit
import Metal

//MARK:- Pipeline Properties
var device: MTLDevice!
var metalLayer: CAMetalLayer!
// assuming z=0, using the default normalized coordinate system of a 2x2x1 cube centered at coordinates (0,0,0.5)
//node object holds vertexBuffer

var objectToDraw: Cube!
var pipelineState: MTLRenderPipelineState!
var commandQueue: MTLCommandQueue!

//MARK:- Rendering Properties
var timer: CADisplayLink!

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        
        //MARK:- Setup code
        // initializing the MTLDevice using the default detected Metal compatible GPU
        device = MTLCreateSystemDefaultDevice()
        
        // initializing the CAMetalLayer
        metalLayer = CAMetalLayer()
        metalLayer.device = device
        metalLayer.pixelFormat = .bgra8Unorm // 8 bytes for Blue, Green, Red and Alpha, in that order, normalized values between 0 and 1
        metalLayer.framebufferOnly = true // Apple recommends this setting unless you need to sample from the textures generated by the layer in question
        metalLayer.frame = view.layer.frame
        view.layer.addSublayer(metalLayer)
        
        // drawing our node using its helper classes
       objectToDraw = Cube(device: device)
        objectToDraw.positionX = -0.25
        objectToDraw.rotationZ = Matrix4.degrees(toRad: 45)
        objectToDraw.scale = 0.5
        
        // creating our rendering pipeline
        // grab the default Library's built in functions from the GPU device.
        let defaultLibrary = device.makeDefaultLibrary()! // gives us an MTLLibrary object
        
        // returns pre-compiled functions that we set up in our shaders file
        let fragmentProgram = defaultLibrary.makeFunction(name: "basic_fragment")
        let vertexProgram = defaultLibrary.makeFunction(name: "basic_vertex")
        
        let pipelineStateDescriptor = MTLRenderPipelineDescriptor()
        pipelineStateDescriptor.vertexFunction = vertexProgram
        pipelineStateDescriptor.fragmentFunction = fragmentProgram
        pipelineStateDescriptor.colorAttachments[0].pixelFormat = .bgra8Unorm // pixel format for the output buffer
        
        pipelineState = try! device.makeRenderPipelineState(descriptor: pipelineStateDescriptor) // compile the pipeline configuration into a more efficient pipeline state for further use
        
        // command queue is an ordered list of commands that you use to instruct the GPU, executed one at a time
        commandQueue = device.makeCommandQueue()
        
        //MARK:- Rendering code
        // setting up the display link
        timer = CADisplayLink(target: self, selector: #selector(gameloop))
        timer.add(to: .main, forMode: .default)
    }

    func render(){
        // creating our Redner Pass Descriptor
        guard let drawable = metalLayer.nextDrawable() else { return } // call nextDrawable to get the next texture to draw on screen
        
        // using the render method from our Node class, by way of the Triangle class which extends it.
        objectToDraw.render(commandQueue: commandQueue, pipelineState: pipelineState, drawable: drawable, clearColor: nil)
    }
    
    @objc func gameloop() {
        autoreleasepool {
            // call render each frame
            self.render()
        }
    }

}

