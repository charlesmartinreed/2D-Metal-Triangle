//
//  ViewController.swift
//  HelloMetal
//
//  Created by Charles Martin Reed on 10/1/18.
//  Copyright Â© 2018 Charles Martin Reed. All rights reserved.
//

import UIKit
import Metal

//MARK:- Properties
var device: MTLDevice!
var metalLayer: CAMetalLayer!
// assuming z=0, using the default normalized coordinate system of a 2x2x1 cube centered at coordinates (0,0,0.5)
let vertexData: [Float] = [0.0, 1.0, 0.0,
                           -1.0, -1.0, 0.0,
                           1.0, -1.0, 0.0]
var vertexBuffer: MTLBuffer!
var pipelineState: MTLRenderPipelineState!
var commandQueue: MTLCommandQueue!

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        
        //MARK:- Setup code
        // initializing the MTLDevice using the default detected Metal compatible GPU
        device = MTLCreateSystemDefaultDevice()
        
        // initializing the CAMetalLayer
        metalLayer = CAMetalLayer()
        metalLayer.device = device
        metalLayer.pixelFormat = .bgra8Unorm // 8 bytes for Blue, Green, Red and Alpha, in that order, normalized values between 0 and 1
        metalLayer.framebufferOnly = true // Apple recommends this setting unless you need to sample from the textures generated by the layer in question
        metalLayer.frame = view.layer.frame
        view.layer.addSublayer(metalLayer)
        
        // adding our vertices to the MTLBuffer for eventual display
        let dataSize = vertexData.count * MemoryLayout.size(ofValue: vertexData[0]) // get size in bytes by multiplying size of first element by the number of elements in array
        vertexBuffer = device.makeBuffer(bytes: vertexData, length: dataSize, options: []) // create a buffer on the GPU device, passing in the size values from the CPU.
        
        // creating our rendering pipeline
        // grab the default Library's built in functions from the GPU device.
        let defaultLibrary = device.makeDefaultLibrary()! // gives us an MTLLibrary object
        
        // returns pre-compiled functions that we set up in our shaders file
        let fragmentProgram = defaultLibrary.makeFunction(name: "basic_fragment")
        let vertexProgram = defaultLibrary.makeFunction(name: "basic_vertex")
        
        let pipelineStateDescriptor = MTLRenderPipelineDescriptor()
        pipelineStateDescriptor.vertexFunction = vertexProgram
        pipelineStateDescriptor.fragmentFunction = fragmentProgram
        pipelineStateDescriptor.colorAttachments[0].pixelFormat = .bgra8Unorm // pixel format for the output buffer
        
        pipelineState = try! device.makeRenderPipelineState(descriptor: pipelineStateDescriptor) // compile the pipeline configuration into a more efficient pipeline state for further use
        
        // command queue is an ordered list of commands that you use to instruct the GPU, executed one at a time
        commandQueue = device.makeCommandQueue()
        
        //MARK:- Rendering code
    }


}

